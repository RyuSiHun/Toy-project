#include <stdio.h>
#include <conio.h>
#include <windows.h>
#include <mmsystem.h>

#define NKEY		29
#define NINSTRUMENT	128
#define NNOTE		128
#define NVOLUME		128

// winmm.lib 파일을 링크할 때 추가			(https://docs.microsoft.com/en-us/windows/desktop/multimedia/midi-reference)
#pragma comment(lib, "winmm.lib")

// 선언되는 구조체를 1바이트 단위로 정렬
#pragma pack(push, 1)

// Short Midi MSG 구조체
typedef struct
{
	BYTE byteState;		// MIDI State		(https://midi.org/expanded-midi-1-0-messages-list)
	BYTE byteNote;		// MIDI Data (1)	(https://midi.org/midi-1-0-control-change-messages)
	BYTE byteVelocity;	// MIDI Data (2)
	BYTE byteNULL;
}MIDIShortMSG_ST;

typedef union
{
	DWORD dwMIDIData;
	MIDIShortMSG_ST stMIDIData;
}MIDIShortMSG;

#pragma pack(pop)

// 미디 출력 중에 발생하는 메시지를 받는 콜백 함수
void CALLBACK MidiOutproc(HMIDIOUT hMidiDecice, UINT uMsg,
	DWORD Instance, DWORD Paraml, DWORD Param2)
{

}

// 미디 에러 코드를 문자열로 출력하는 함수
void MIDIOutputError(MMRESULT mmResult)
{
	// 에러 문자열을 저장할 배열
	char szErrMsg[128] = { 0 };

	//에러 코드를 문자열로 반환
	midiOutGetErrorText(mmResult, (char*)szErrMsg, sizeof(szErrMsg));

	// 변환된 문자열을 메시지 박스로 출력
	MessageBox(0, szErrMsg, "Midi Error!!!", MB_OK);
}

// 미디 장치 번호를 알아 내는 함수
long MIDIGetDevID(HMIDIOUT hMidiDevice)
{
	// 장치 번호 저장 변수
	UINT	uDeviceID;

	// 미디 출력 핸들에 대응하는 장치 번호를 uDeviceID 변수에 저장
	MMRESULT mmResult = midiOutGetID(hMidiDevice, &uDeviceID);

	// 장치 조사 중에 에러가 발생할 경우
	if (mmResult != MMSYSERR_NOERROR)
	{
		// 에러 출력 후 에러를 리턴값으로 알림
		MIDIOutputError(mmResult);
		return -1;
	}

	// 장치 번호 리턴
	return (long)uDeviceID;
}

// 미디 핸들로 미디 장치 속성을 MIDIOUTCAPS 구조체 변수에 저장해주는 함수
void MIDIGetDevCaps(HMIDIOUT hMidiDevice, MIDIOUTCAPS* Caps)
{
	// 장치 번호 저장 변수
	long	lDeviceID;

	// 에러 코드 저장 변수
	MMRESULT mmResult;

	// 미디 핸들을 이용해 장치 번호를 조사해서 lDeviceID 변수에 저장
	lDeviceID = MIDIGetDevID(hMidiDevice);

	// lDeviceID가 음수면 에러가 난 경우이므로 이 함수의 처리를 더이상 진행하지 않음
	if (lDeviceID < 0) return;

	// 미디 장치의 속성을 MIDIOUTCAPS 구조체 변수에 저장
	mmResult = midiOutGetDevCaps((UINT)lDeviceID, Caps, sizeof(MIDIOUTCAPS));

	// 에러 문자열 출력
	if (mmResult != MMSYSERR_NOERROR)
	{
		MIDIOutputError(mmResult);
	}
}

// 장치 번호에 해당하는 미디 장치 열기
HMIDIOUT MIDIOpen(WORD wMidiNum)
{
	WORD		wMidiMax = 0;
	MMRESULT	mmResult = 0;
	HMIDIOUT	hMidiDevice = NULL;

	// 사용가능한 장치의 총 갯수를 wMidiMax변수에 저장
	wMidiMax = midiOutGetNumDevs();

	// 입력한 번호가 총 갯수보다 같거나 큰 값이면 장치 번호를 0으로 조정
	if (wMidiNum >= wMidiMax) wMidiNum = 0;

	// wMidiNum변수 값에 해당하는 미디 장치를 열고 장치 핸들값을 hMidiDevice에 저장
	// 연주 중에 발생하는 메시지는 콜백함수 MidiOutProc로 보냄
	//mmResult = midiOutOpen(&hMidiDevice, wMidiNum, (DWORD)(MidiOutproc), (DWORD)NULL, CALLBACK_FUNCTION); 포인터 오류 발생
		mmResult = midiOutOpen(&hMidiDevice, wMidiNum, 0, 0, CALLBACK_FUNCTION);

	// 열기 도중 에러가 발생하면
	if (mmResult != MMSYSERR_NOERROR)
	{
		MIDIOutputError(mmResult);	// 에러문자열 출력
		return NULL;
	}

	return hMidiDevice;	// 장치 핸들 리턴
}

// 핸들값에 해당하는 미디장치 닫기
LRESULT MIDIClose(HMIDIOUT hMidiDevice)
{
	MMRESULT	mmResult;

	// 미디 핸들값을 이용해 장치 닫기
	mmResult = midiOutClose(hMidiDevice);

	// 닫는 도중에 에러가 발생하면
	if (mmResult != MMSYSERR_NOERROR)
	{
		MIDIOutputError(mmResult);	// 에러 출력
		return FALSE;				// 닫기 실패
	}

	return TRUE;					// 닫기 성공
}

void MIDISendShortMsg(HMIDIOUT hMidiDevice, BYTE byteState, BYTE byteNote, BYTE byteValo)
{
	MIDIShortMSG	sMsg;

	// MIDIShortMSG 구조체 안에 있는
	// MIDIShortMSG_ST 구조체 변수의 각 멤버 변수에 값을 채움
	sMsg.stMIDIData.byteVelocity = byteValo;
	sMsg.stMIDIData.byteNote = byteNote;
	sMsg.stMIDIData.byteState = byteState;
	sMsg.stMIDIData.byteNULL = 0;

	// 출력 장치로 값을 채워넣은 구조체의 데이터를 보냄
	midiOutShortMsg(hMidiDevice, sMsg.dwMIDIData);
}

// 모든 채널의 연주중인 음을 종료시키는 함수
void MIDIAllChannelSoundOff(HMIDIOUT hMidiDevice)
{
	BYTE channel;

	for (channel = 0; channel < 16; channel++)
	{
		// 0xB0: Control/Mode Change
		// 0x78: All Sound Off
		MIDISendShortMsg(hMidiDevice, (BYTE)(0xB0 + channel), 0x78, 0);
	}
}

// 좌표 이동
void gotoxy(int x, int y)
{
	COORD Cur;
	Cur.X = x;
	Cur.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);
}

int main(void)
{
	int loop;
	BYTE key = 0;
	BYTE instrument = 0;
	BYTE volume = 127;		// 볼륨 (max = 127)
	BYTE octave = 48;		// 옥타브: 48; (defalut)
	BYTE velocity = 120;	// 키 속도: 120 (default)

	HMIDIOUT hMidiDevice;	// 미디장치 컨트롤을 위한 미디 출력 핸들

	// 피아노 건반으로 매칭할 키보드 키
	BYTE pianoKey[NKEY] = {							// https://docs.microsoft.com/en-us/windows/desktop/inputdev/virtual-key-codes
		0x5A, 0x53, 0x58, 0x44, 0x43,				/* Z S X D C */
		0x56, 0x47, 0x42, 0x48, 0x4E, 0x4A, 0x4D,	/* V G B H N J M */
		0x51, 0x32, 0x57, 0x33, 0x45,				/* Q 2 W 3 E */
		0x52, 0x35, 0x54, 0x36, 0x59, 0x37, 0x55,	/* R 5 T 6 Y 7 U */
		0x49, 0x39, 0x4F, 0x30, 0x50				/* I 9 O 0 P */
	};

	BYTE pianoKeyOnOff[NKEY] = { 0 };

	char instName[][NINSTRUMENT] = {
		"Acoustic Grand", "Bright Acoustic", "Electric Grand", "Honky-Tonk",
		"Electric Piano 1", "Electric Piano 2", "Harpsichord", "Clav",
		"Celesta", "Glockenspiel", "Music Box", "Vibraphone",
		"Marimba", "Xylophone", "Tubular Bells", "Dulcimer",
		"Drawbar Organ", "Percussive Organ", "Rock Organ", "Church Organ",
		"Reed Organ", "Accordion", "Harmonica", "Tango Accordion",
		"Acoustic Guitar (nylon)", "Acoustic Guitar (steel)", "Electric Guitar (jazz)", "Electric Guitar (clean)",
		"Electric Guitar (muted)", "Overdriven Guitar", "Distortion Guitar", "Guitar Harmonics",
		"Acoustic Bass", "Electric Bass (finger)", "Electric Bass(pick)", "Fretless Bass",
		"Slap Bass 1", "Slap Bass 2", "Synth Bass 1", "Synth Bass 2",
		"Violin", "Viola", "Cello", "Contrabass",
		"Tremolo Strings", "Pizzicato Strings", "Orchestral Harp", "Timpani",
		"String Ensemble 1", "String Ensemble 2", "SynthStrings 1", "SynthStrings 2",
		"Choir Aahs", "Voice Oohs", "Synth Voice", "Orchestra Hit",
		"Trumpet", "Trombone", "Tuba", "Muted Trumpet",
		"French Horn", "Brass Section", "SynthBrass 1", "SynthBrass 2",
		"Soprano Sax", "Alto Sax", "Tenor Sax", "Baritone Sax",
		"Oboe", "English Horn", "Bassoon", "Clarinet",
		"Piccolo", "Flute", "Recorder", "Pan Flute",
		"Blown Bottle", "Shakuhachi", "Whistle", "Ocarina",
		"Lead 1 (square)", "Lead 2 (sawtooth)", "Lead 3 (calliope)", "Lead 4 (chiff)",
		"Lead 5 (charang)", "Lead 6 (voice)", "Lead 7 (fifths)", "Lead 8 (bass+lead)",
		"Pad 1 (new age)", "Pad 2 (warm)", "Pad 3 (polysynth)", "Pad 4 (choir)",
		"Pad 5 (bowed)", "Pad 6 (metallic)", "Pad 7 (halo)", "Pad 8 (sweep)",
		"FX 1 (rain)", "FX 2 (soundtrack)", "FX 3 (crystal)", "FX 4 (atmosphere)",
		"FX 5 (brightness)", "FX 6 (goblins)", "FX 7 (echoes)", "FX 8 (sci-fi)",
		"Sitar", "Banjo", "Shamisen", "Koto",
		"Kalimba", "Bagpipe", "Fiddle", "Shanal",
		"Tinkle Bell", "Agogo", "Steel Drums", "Woodblock",
		"Taiko Drum", "Melodic Tom", "Synth Drum", "Reverse Cymbal",
		"Guitar Fret Noise", "Breath Noise", "Seashore", "Bird Tweet",
		"Telephone Ring", "Helicopter", "Applause", "Gunshot"
	};

	// 장치 번호 0번 미디 장치 열기
	hMidiDevice = MIDIOpen(0);

	// 에러가 발생하면 프로그램 종료
	if (hMidiDevice == NULL)
	{
		return;
	}

	// 피아노 화면 출력
	printf("[ESC] : Exit\n\n");
	printf(" Instrument : %-25s     Octave : %03d     Volume : %03d\n\n", instName[0], octave, volume);
	puts("  |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   | ");
	puts("  |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   | ");
	puts("  |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   |   |   | |   | |   |   |   |   | |   |   | ");
	puts("  |   | S | | D |   |   | G | | H | | J |   |   | 2 | | 3 |   |   | 5 | | 6 | | 7 |   |   | 9 | | 0 |   | ");
	puts("  |    ---   ---     --- ---   ---   ---    |    ---   ---    |    ---   ---   ---    |    ---   ---    | ");
	puts("  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     | ");
	puts("  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  | ");
	puts("  |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     | ");
	puts("   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----  ");


	// 모든 채널의 소리 끄기
	MIDIAllChannelSoundOff(hMidiDevice);

	// 1번 채널의 볼륨을 127로 세팅 (0 ~ 127)
	// 0xB0: Control/Mode Change
	// 7: Channel Volume MS
	MIDISendShortMsg(hMidiDevice, 0xB0, 7, volume);

	loop = 1;
	while(loop)	// loop변수가 0이 아니면 계속 반복
	{
		// ESC Key: loop변수 값 0 (종료)
		if (GetKeyState(VK_ESCAPE) < 0) loop = 0;

		// Right Key: 악기 변경 +
		else if (GetKeyState(VK_RIGHT) < 0)
		{
			if (instrument < (NINSTRUMENT - 1))
				instrument += 1;

			// 0xC0: Program Change
			MIDISendShortMsg(hMidiDevice, 0xC0, instrument, 0);
			gotoxy(1, 2);
			printf("Instrument : %-24s", instName[instrument]);
			Sleep(200);
		}
		// Left Key: 악기 변경 -
		else if (GetKeyState(VK_LEFT) < 0)
		{
			if (instrument != 0)
				instrument -= 1;

			// 0xC0: Program Change
			MIDISendShortMsg(hMidiDevice, 0xC0, instrument, 0);
			gotoxy(1, 2);
			printf("Instrument : %-24s", instName[instrument]);
			Sleep(200);
		}

		// Up Key: 옥타브 +
		else if (GetKeyState(VK_UP) < 0)
		{
			if (octave < (NNOTE - NKEY))
				octave += 12;

			gotoxy(43, 2);
			printf("Octave : %03d", octave);
			Sleep(200);
		}
		// Down Key: 옥타브 -
		else if (GetKeyState(VK_DOWN) < 0)
		{
			if (octave != 0)
				octave -= 12;

			gotoxy(43, 2);
			printf("Octave : %03d", octave);
			Sleep(200);
		}

		// ESC Key: loop변수 값 0 (종료)
		if (GetKeyState(VK_ESCAPE) < 0) loop = 0;
		// + Key: 볼륨 조절 +
		else if (GetKeyState(VK_OEM_PLUS) < 0)
		{
			if (volume < (NVOLUME - 1))
				volume += 1;

			// 0xB0: Control/Mode Change
			// 7: Channel Volume MS
			MIDISendShortMsg(hMidiDevice, 0xB0, 7, volume);
			gotoxy(58, 2);
			printf("Volume : %03d", volume);
			Sleep(60);
		}
		// - Key: 볼륨 조절 -
		else if (GetKeyState(VK_OEM_MINUS) < 0)
		{
			if (volume != 0)
				volume -= 1;

			// 0xB0: Control/Mode Change
			// 7: Channel Volume MS
			MIDISendShortMsg(hMidiDevice, 0xB0, 7, volume);
			gotoxy(58, 2);
			printf("Volume : %03d", volume);
			Sleep(60);
		}

		else
		{
			for (key = 0; key < NKEY; key++)
			{
				// szMusKey배열의 i번째 값에 해당하는 키가 입력되면
				if (GetKeyState(pianoKey[key]) < 0)
				{
					// 이전에 이 키를 누른 적이 없다면
					if (pianoKeyOnOff[key] == 0)
					{
						// 이전에 이 키가 눌렀던 것으로 기록
						pianoKeyOnOff[key] = 1;
						// 현재 눌린 키에 해당하는 미디 음을 연주
						// 0x90: Note on
						MIDISendShortMsg(hMidiDevice, 0x90, (BYTE)(octave + key), velocity);
					}
				}
			}
		}
		// 키보드 키를 떼었을때
		for (key = 0; key < NKEY; key++)
		{
			// szMuseKey배열의 i번쨰 값에 해당하는 키가 입력된 것이 아니라면
			if (!(GetKeyState(pianoKey[key]) < 0))
			{
				// 그 키가 입력된 적이 있는 키이면
				if (pianoKeyOnOff[key] != 0)
				{
					// 누른 적이 없는 걸로 기록
					pianoKeyOnOff[key] = 0;
					// 연주 중인 소리를 끔
					// 0x80: Note off
					MIDISendShortMsg(hMidiDevice, 0x80, (BYTE)(octave + key), velocity);
				}
			}
		}
	}
	// ESC로 나가면 현재 연주중인 소리를 모두 끔
	for (key = 0; key < NKEY; key++)
	{
		if (pianoKeyOnOff[key] != 0)
		{
			MIDISendShortMsg(hMidiDevice, 0x80, (BYTE)(octave + key), velocity);
		}
	}

	// 모든 채널 사운드 끄기
	MIDIAllChannelSoundOff(hMidiDevice);

	// 열린 미디 장치를 닫기
	MIDIClose(hMidiDevice);

	return 0;
}
